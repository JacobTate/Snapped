{"ast":null,"code":"module.exports = function (hljs) {\n  var KEYWORDS = {\n    keyword: 'actor addressof and as be break class compile_error compile_intrinsic ' + 'consume continue delegate digestof do else elseif embed end error ' + 'for fun if ifdef in interface is isnt lambda let match new not object ' + 'or primitive recover repeat return struct then trait try type until ' + 'use var where while with xor',\n    meta: 'iso val tag trn box ref',\n    literal: 'this false true'\n  };\n  var TRIPLE_QUOTE_STRING_MODE = {\n    className: 'string',\n    begin: '\"\"\"',\n    end: '\"\"\"',\n    relevance: 10\n  };\n  var QUOTE_STRING_MODE = {\n    className: 'string',\n    begin: '\"',\n    end: '\"',\n    contains: [hljs.BACKSLASH_ESCAPE]\n  };\n  var SINGLE_QUOTE_CHAR_MODE = {\n    className: 'string',\n    begin: '\\'',\n    end: '\\'',\n    contains: [hljs.BACKSLASH_ESCAPE],\n    relevance: 0\n  };\n  var TYPE_NAME = {\n    className: 'type',\n    begin: '\\\\b_?[A-Z][\\\\w]*',\n    relevance: 0\n  };\n  var PRIMED_NAME = {\n    begin: hljs.IDENT_RE + '\\'',\n    relevance: 0\n  };\n  var NUMBER_MODE = {\n    className: 'number',\n    begin: '(-?)(\\\\b0[xX][a-fA-F0-9]+|\\\\b0[bB][01]+|(\\\\b\\\\d+(_\\\\d+)?(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)',\n    relevance: 0\n  };\n  /**\n   * The `FUNCTION` and `CLASS` modes were intentionally removed to simplify\n   * highlighting and fix cases like\n   * ```\n   * interface Iterator[A: A]\n   *   fun has_next(): Bool\n   *   fun next(): A?\n   * ```\n   * where it is valid to have a function head without a body\n   */\n\n  return {\n    keywords: KEYWORDS,\n    contains: [TYPE_NAME, TRIPLE_QUOTE_STRING_MODE, QUOTE_STRING_MODE, SINGLE_QUOTE_CHAR_MODE, PRIMED_NAME, NUMBER_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n  };\n};","map":{"version":3,"sources":["C:/Users/micha/coding/Projects/Snapped/client/node_modules/highlight.js/lib/languages/pony.js"],"names":["module","exports","hljs","KEYWORDS","keyword","meta","literal","TRIPLE_QUOTE_STRING_MODE","className","begin","end","relevance","QUOTE_STRING_MODE","contains","BACKSLASH_ESCAPE","SINGLE_QUOTE_CHAR_MODE","TYPE_NAME","PRIMED_NAME","IDENT_RE","NUMBER_MODE","keywords","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAASC,IAAT,EAAe;AAC9B,MAAIC,QAAQ,GAAG;AACbC,IAAAA,OAAO,EACL,2EACA,oEADA,GAEA,wEAFA,GAGA,sEAHA,GAIA,8BANW;AAObC,IAAAA,IAAI,EACF,yBARW;AASbC,IAAAA,OAAO,EACL;AAVW,GAAf;AAaA,MAAIC,wBAAwB,GAAG;AAC7BC,IAAAA,SAAS,EAAE,QADkB;AAE7BC,IAAAA,KAAK,EAAE,KAFsB;AAEfC,IAAAA,GAAG,EAAE,KAFU;AAG7BC,IAAAA,SAAS,EAAE;AAHkB,GAA/B;AAMA,MAAIC,iBAAiB,GAAG;AACtBJ,IAAAA,SAAS,EAAE,QADW;AAEtBC,IAAAA,KAAK,EAAE,GAFe;AAEVC,IAAAA,GAAG,EAAE,GAFK;AAGtBG,IAAAA,QAAQ,EAAE,CAACX,IAAI,CAACY,gBAAN;AAHY,GAAxB;AAMA,MAAIC,sBAAsB,GAAG;AAC3BP,IAAAA,SAAS,EAAE,QADgB;AAE3BC,IAAAA,KAAK,EAAE,IAFoB;AAEdC,IAAAA,GAAG,EAAE,IAFS;AAG3BG,IAAAA,QAAQ,EAAE,CAACX,IAAI,CAACY,gBAAN,CAHiB;AAI3BH,IAAAA,SAAS,EAAE;AAJgB,GAA7B;AAOA,MAAIK,SAAS,GAAG;AACdR,IAAAA,SAAS,EAAE,MADG;AAEdC,IAAAA,KAAK,EAAE,kBAFO;AAGdE,IAAAA,SAAS,EAAE;AAHG,GAAhB;AAMA,MAAIM,WAAW,GAAG;AAChBR,IAAAA,KAAK,EAAEP,IAAI,CAACgB,QAAL,GAAgB,IADP;AACaP,IAAAA,SAAS,EAAE;AADxB,GAAlB;AAIA,MAAIQ,WAAW,GAAG;AAChBX,IAAAA,SAAS,EAAE,QADK;AAEhBC,IAAAA,KAAK,EAAE,8FAFS;AAGhBE,IAAAA,SAAS,EAAE;AAHK,GAAlB;AAMA;;;;;;;;;;;AAWA,SAAO;AACLS,IAAAA,QAAQ,EAAEjB,QADL;AAELU,IAAAA,QAAQ,EAAE,CACRG,SADQ,EAERT,wBAFQ,EAGRK,iBAHQ,EAIRG,sBAJQ,EAKRE,WALQ,EAMRE,WANQ,EAORjB,IAAI,CAACmB,mBAPG,EAQRnB,IAAI,CAACoB,oBARG;AAFL,GAAP;AAaD,CAzED","sourcesContent":["module.exports = function(hljs) {\n  var KEYWORDS = {\n    keyword:\n      'actor addressof and as be break class compile_error compile_intrinsic ' +\n      'consume continue delegate digestof do else elseif embed end error ' +\n      'for fun if ifdef in interface is isnt lambda let match new not object ' +\n      'or primitive recover repeat return struct then trait try type until ' +\n      'use var where while with xor',\n    meta:\n      'iso val tag trn box ref',\n    literal:\n      'this false true'\n  };\n\n  var TRIPLE_QUOTE_STRING_MODE = {\n    className: 'string',\n    begin: '\"\"\"', end: '\"\"\"',\n    relevance: 10\n  };\n\n  var QUOTE_STRING_MODE = {\n    className: 'string',\n    begin: '\"', end: '\"',\n    contains: [hljs.BACKSLASH_ESCAPE]\n  };\n\n  var SINGLE_QUOTE_CHAR_MODE = {\n    className: 'string',\n    begin: '\\'', end: '\\'',\n    contains: [hljs.BACKSLASH_ESCAPE],\n    relevance: 0\n  };\n\n  var TYPE_NAME = {\n    className: 'type',\n    begin: '\\\\b_?[A-Z][\\\\w]*',\n    relevance: 0\n  };\n\n  var PRIMED_NAME = {\n    begin: hljs.IDENT_RE + '\\'', relevance: 0\n  };\n\n  var NUMBER_MODE = {\n    className: 'number',\n    begin: '(-?)(\\\\b0[xX][a-fA-F0-9]+|\\\\b0[bB][01]+|(\\\\b\\\\d+(_\\\\d+)?(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)',\n    relevance: 0\n  };\n\n  /**\n   * The `FUNCTION` and `CLASS` modes were intentionally removed to simplify\n   * highlighting and fix cases like\n   * ```\n   * interface Iterator[A: A]\n   *   fun has_next(): Bool\n   *   fun next(): A?\n   * ```\n   * where it is valid to have a function head without a body\n   */\n\n  return {\n    keywords: KEYWORDS,\n    contains: [\n      TYPE_NAME,\n      TRIPLE_QUOTE_STRING_MODE,\n      QUOTE_STRING_MODE,\n      SINGLE_QUOTE_CHAR_MODE,\n      PRIMED_NAME,\n      NUMBER_MODE,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n};"]},"metadata":{},"sourceType":"script"}
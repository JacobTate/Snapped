{"ast":null,"code":"module.exports = function (hljs) {\n  var LITERALS = 'true false yes no null'; // Define keys as starting with a word character\n  // ...containing word chars, spaces, colons, forward-slashes, hyphens and periods\n  // ...and ending with a colon followed immediately by a space, tab or newline.\n  // The YAML spec allows for much more than this, but this covers most use-cases.\n\n  var KEY = {\n    className: 'attr',\n    variants: [{\n      begin: '\\\\w[\\\\w :\\\\/.-]*:(?=[ \\t]|$)'\n    }, {\n      begin: '\"\\\\w[\\\\w :\\\\/.-]*\":(?=[ \\t]|$)'\n    }, //double quoted keys\n    {\n      begin: '\\'\\\\w[\\\\w :\\\\/.-]*\\':(?=[ \\t]|$)'\n    } //single quoted keys\n    ]\n  };\n  var TEMPLATE_VARIABLES = {\n    className: 'template-variable',\n    variants: [{\n      begin: '\\{\\{',\n      end: '\\}\\}'\n    }, // jinja templates Ansible\n    {\n      begin: '%\\{',\n      end: '\\}'\n    } // Ruby i18n\n    ]\n  };\n  var STRING = {\n    className: 'string',\n    relevance: 0,\n    variants: [{\n      begin: /'/,\n      end: /'/\n    }, {\n      begin: /\"/,\n      end: /\"/\n    }, {\n      begin: /\\S+/\n    }],\n    contains: [hljs.BACKSLASH_ESCAPE, TEMPLATE_VARIABLES]\n  };\n  return {\n    case_insensitive: true,\n    aliases: ['yml', 'YAML', 'yaml'],\n    contains: [KEY, {\n      className: 'meta',\n      begin: '^---\\s*$',\n      relevance: 10\n    }, {\n      // multi line string\n      // Blocks start with a | or > followed by a newline\n      //\n      // Indentation of subsequent lines must be the same to\n      // be considered part of the block\n      className: 'string',\n      begin: '[\\\\|>]([0-9]?[+-])?[ ]*\\\\n( *)[\\\\S ]+\\\\n(\\\\2[\\\\S ]+\\\\n?)*'\n    }, {\n      // Ruby/Rails erb\n      begin: '<%[%=-]?',\n      end: '[%-]?%>',\n      subLanguage: 'ruby',\n      excludeBegin: true,\n      excludeEnd: true,\n      relevance: 0\n    }, {\n      // local tags\n      className: 'type',\n      begin: '!' + hljs.UNDERSCORE_IDENT_RE\n    }, {\n      // data type\n      className: 'type',\n      begin: '!!' + hljs.UNDERSCORE_IDENT_RE\n    }, {\n      // fragment id &ref\n      className: 'meta',\n      begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$'\n    }, {\n      // fragment reference *ref\n      className: 'meta',\n      begin: '\\\\*' + hljs.UNDERSCORE_IDENT_RE + '$'\n    }, {\n      // array listing\n      className: 'bullet',\n      // TODO: remove |$ hack when we have proper look-ahead support\n      begin: '\\\\-(?=[ ]|$)',\n      relevance: 0\n    }, hljs.HASH_COMMENT_MODE, {\n      beginKeywords: LITERALS,\n      keywords: {\n        literal: LITERALS\n      }\n    }, // numbers are any valid C-style number that\n    // sit isolated from other words\n    {\n      className: 'number',\n      begin: hljs.C_NUMBER_RE + '\\\\b'\n    }, STRING]\n  };\n};","map":{"version":3,"sources":["C:/Users/micha/coding/Projects/Snapped/client/node_modules/highlight.js/lib/languages/yaml.js"],"names":["module","exports","hljs","LITERALS","KEY","className","variants","begin","TEMPLATE_VARIABLES","end","STRING","relevance","contains","BACKSLASH_ESCAPE","case_insensitive","aliases","subLanguage","excludeBegin","excludeEnd","UNDERSCORE_IDENT_RE","HASH_COMMENT_MODE","beginKeywords","keywords","literal","C_NUMBER_RE"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAASC,IAAT,EAAe;AAC9B,MAAIC,QAAQ,GAAG,wBAAf,CAD8B,CAG9B;AACA;AACA;AACA;;AACA,MAAIC,GAAG,GAAG;AACRC,IAAAA,SAAS,EAAE,MADH;AAERC,IAAAA,QAAQ,EAAE,CACR;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADQ,EAER;AAAEA,MAAAA,KAAK,EAAE;AAAT,KAFQ,EAEqC;AAC7C;AAAEA,MAAAA,KAAK,EAAE;AAAT,KAHQ,CAGsC;AAHtC;AAFF,GAAV;AASA,MAAIC,kBAAkB,GAAG;AACvBH,IAAAA,SAAS,EAAE,mBADY;AAEvBC,IAAAA,QAAQ,EAAE,CACR;AAAEC,MAAAA,KAAK,EAAE,MAAT;AAAiBE,MAAAA,GAAG,EAAE;AAAtB,KADQ,EACwB;AAChC;AAAEF,MAAAA,KAAK,EAAE,KAAT;AAAgBE,MAAAA,GAAG,EAAE;AAArB,KAFQ,CAEoB;AAFpB;AAFa,GAAzB;AAOA,MAAIC,MAAM,GAAG;AACXL,IAAAA,SAAS,EAAE,QADA;AAEXM,IAAAA,SAAS,EAAE,CAFA;AAGXL,IAAAA,QAAQ,EAAE,CACR;AAACC,MAAAA,KAAK,EAAE,GAAR;AAAaE,MAAAA,GAAG,EAAE;AAAlB,KADQ,EAER;AAACF,MAAAA,KAAK,EAAE,GAAR;AAAaE,MAAAA,GAAG,EAAE;AAAlB,KAFQ,EAGR;AAACF,MAAAA,KAAK,EAAE;AAAR,KAHQ,CAHC;AAQXK,IAAAA,QAAQ,EAAE,CACRV,IAAI,CAACW,gBADG,EAERL,kBAFQ;AARC,GAAb;AAcA,SAAO;AACLM,IAAAA,gBAAgB,EAAE,IADb;AAELC,IAAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,MAAR,EAAgB,MAAhB,CAFJ;AAGLH,IAAAA,QAAQ,EAAE,CACRR,GADQ,EAER;AACEC,MAAAA,SAAS,EAAE,MADb;AAEEE,MAAAA,KAAK,EAAE,UAFT;AAGEI,MAAAA,SAAS,EAAE;AAHb,KAFQ,EAOR;AAAE;AACA;AACA;AACA;AACA;AACAN,MAAAA,SAAS,EAAE,QALb;AAMEE,MAAAA,KAAK,EAAE;AANT,KAPQ,EAeR;AAAE;AACAA,MAAAA,KAAK,EAAE,UADT;AACqBE,MAAAA,GAAG,EAAE,SAD1B;AAEEO,MAAAA,WAAW,EAAE,MAFf;AAGEC,MAAAA,YAAY,EAAE,IAHhB;AAIEC,MAAAA,UAAU,EAAE,IAJd;AAKEP,MAAAA,SAAS,EAAE;AALb,KAfQ,EAsBR;AAAE;AACAN,MAAAA,SAAS,EAAE,MADb;AAEEE,MAAAA,KAAK,EAAE,MAAML,IAAI,CAACiB;AAFpB,KAtBQ,EA0BR;AAAE;AACAd,MAAAA,SAAS,EAAE,MADb;AAEEE,MAAAA,KAAK,EAAE,OAAOL,IAAI,CAACiB;AAFrB,KA1BQ,EA8BR;AAAE;AACAd,MAAAA,SAAS,EAAE,MADb;AAEEE,MAAAA,KAAK,EAAE,MAAML,IAAI,CAACiB,mBAAX,GAAiC;AAF1C,KA9BQ,EAkCR;AAAE;AACAd,MAAAA,SAAS,EAAE,MADb;AAEEE,MAAAA,KAAK,EAAE,QAAQL,IAAI,CAACiB,mBAAb,GAAmC;AAF5C,KAlCQ,EAsCR;AAAE;AACAd,MAAAA,SAAS,EAAE,QADb;AAEA;AACAE,MAAAA,KAAK,EAAE,cAHP;AAIEI,MAAAA,SAAS,EAAE;AAJb,KAtCQ,EA4CRT,IAAI,CAACkB,iBA5CG,EA6CR;AACEC,MAAAA,aAAa,EAAElB,QADjB;AAEEmB,MAAAA,QAAQ,EAAE;AAACC,QAAAA,OAAO,EAAEpB;AAAV;AAFZ,KA7CQ,EAiDR;AACA;AACA;AACEE,MAAAA,SAAS,EAAE,QADb;AAEEE,MAAAA,KAAK,EAAEL,IAAI,CAACsB,WAAL,GAAmB;AAF5B,KAnDQ,EAuDRd,MAvDQ;AAHL,GAAP;AA6DD,CAlGD","sourcesContent":["module.exports = function(hljs) {\n  var LITERALS = 'true false yes no null';\n\n  // Define keys as starting with a word character\n  // ...containing word chars, spaces, colons, forward-slashes, hyphens and periods\n  // ...and ending with a colon followed immediately by a space, tab or newline.\n  // The YAML spec allows for much more than this, but this covers most use-cases.\n  var KEY = {\n    className: 'attr',\n    variants: [\n      { begin: '\\\\w[\\\\w :\\\\/.-]*:(?=[ \\t]|$)' },\n      { begin: '\"\\\\w[\\\\w :\\\\/.-]*\":(?=[ \\t]|$)' }, //double quoted keys\n      { begin: '\\'\\\\w[\\\\w :\\\\/.-]*\\':(?=[ \\t]|$)' } //single quoted keys\n    ]\n  };\n\n  var TEMPLATE_VARIABLES = {\n    className: 'template-variable',\n    variants: [\n      { begin: '\\{\\{', end: '\\}\\}' }, // jinja templates Ansible\n      { begin: '%\\{', end: '\\}' } // Ruby i18n\n    ]\n  };\n  var STRING = {\n    className: 'string',\n    relevance: 0,\n    variants: [\n      {begin: /'/, end: /'/},\n      {begin: /\"/, end: /\"/},\n      {begin: /\\S+/}\n    ],\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      TEMPLATE_VARIABLES\n    ]\n  };\n\n  return {\n    case_insensitive: true,\n    aliases: ['yml', 'YAML', 'yaml'],\n    contains: [\n      KEY,\n      {\n        className: 'meta',\n        begin: '^---\\s*$',\n        relevance: 10\n      },\n      { // multi line string\n        // Blocks start with a | or > followed by a newline\n        //\n        // Indentation of subsequent lines must be the same to\n        // be considered part of the block\n        className: 'string',\n        begin: '[\\\\|>]([0-9]?[+-])?[ ]*\\\\n( *)[\\\\S ]+\\\\n(\\\\2[\\\\S ]+\\\\n?)*',\n      },\n      { // Ruby/Rails erb\n        begin: '<%[%=-]?', end: '[%-]?%>',\n        subLanguage: 'ruby',\n        excludeBegin: true,\n        excludeEnd: true,\n        relevance: 0\n      },\n      { // local tags\n        className: 'type',\n        begin: '!' + hljs.UNDERSCORE_IDENT_RE,\n      },\n      { // data type\n        className: 'type',\n        begin: '!!' + hljs.UNDERSCORE_IDENT_RE,\n      },\n      { // fragment id &ref\n        className: 'meta',\n        begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$',\n      },\n      { // fragment reference *ref\n        className: 'meta',\n        begin: '\\\\*' + hljs.UNDERSCORE_IDENT_RE + '$'\n      },\n      { // array listing\n        className: 'bullet',\n      // TODO: remove |$ hack when we have proper look-ahead support\n      begin: '\\\\-(?=[ ]|$)',\n        relevance: 0\n      },\n      hljs.HASH_COMMENT_MODE,\n      {\n        beginKeywords: LITERALS,\n        keywords: {literal: LITERALS}\n      },\n      // numbers are any valid C-style number that\n      // sit isolated from other words\n      {\n        className: 'number',\n        begin: hljs.C_NUMBER_RE + '\\\\b'\n      },\n      STRING\n    ]\n  };\n};"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"module.exports = function (hljs) {\n  var IDENT_RE = '[\\\\w-]+'; // yes, Less identifiers may begin with a digit\n\n  var INTERP_IDENT_RE = '(' + IDENT_RE + '|@{' + IDENT_RE + '})';\n  /* Generic Modes */\n\n  var RULES = [],\n      VALUE = []; // forward def. for recursive modes\n\n  var STRING_MODE = function (c) {\n    return {\n      // Less strings are not multiline (also include '~' for more consistent coloring of \"escaped\" strings)\n      className: 'string',\n      begin: '~?' + c + '.*?' + c\n    };\n  };\n\n  var IDENT_MODE = function (name, begin, relevance) {\n    return {\n      className: name,\n      begin: begin,\n      relevance: relevance\n    };\n  };\n\n  var PARENS_MODE = {\n    // used only to properly balance nested parens inside mixin call, def. arg list\n    begin: '\\\\(',\n    end: '\\\\)',\n    contains: VALUE,\n    relevance: 0\n  }; // generic Less highlighter (used almost everywhere except selectors):\n\n  VALUE.push(hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRING_MODE(\"'\"), STRING_MODE('\"'), hljs.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(\n  {\n    begin: '(url|data-uri)\\\\(',\n    starts: {\n      className: 'string',\n      end: '[\\\\)\\\\n]',\n      excludeEnd: true\n    }\n  }, IDENT_MODE('number', '#[0-9A-Fa-f]+\\\\b'), PARENS_MODE, IDENT_MODE('variable', '@@?' + IDENT_RE, 10), IDENT_MODE('variable', '@{' + IDENT_RE + '}'), IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string\n  {\n    // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):\n    className: 'attribute',\n    begin: IDENT_RE + '\\\\s*:',\n    end: ':',\n    returnBegin: true,\n    excludeEnd: true\n  }, {\n    className: 'meta',\n    begin: '!important'\n  });\n  var VALUE_WITH_RULESETS = VALUE.concat({\n    begin: '{',\n    end: '}',\n    contains: RULES\n  });\n  var MIXIN_GUARD_MODE = {\n    beginKeywords: 'when',\n    endsWithParent: true,\n    contains: [{\n      beginKeywords: 'and not'\n    }].concat(VALUE) // using this form to override VALUE’s 'function' match\n\n  };\n  /* Rule-Level Modes */\n\n  var RULE_MODE = {\n    begin: INTERP_IDENT_RE + '\\\\s*:',\n    returnBegin: true,\n    end: '[;}]',\n    relevance: 0,\n    contains: [{\n      className: 'attribute',\n      begin: INTERP_IDENT_RE,\n      end: ':',\n      excludeEnd: true,\n      starts: {\n        endsWithParent: true,\n        illegal: '[<=$]',\n        relevance: 0,\n        contains: VALUE\n      }\n    }]\n  };\n  var AT_RULE_MODE = {\n    className: 'keyword',\n    begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\\\b',\n    starts: {\n      end: '[;{}]',\n      returnEnd: true,\n      contains: VALUE,\n      relevance: 0\n    }\n  }; // variable definitions and calls\n\n  var VAR_RULE_MODE = {\n    className: 'variable',\n    variants: [// using more strict pattern for higher relevance to increase chances of Less detection.\n    // this is *the only* Less specific statement used in most of the sources, so...\n    // (we’ll still often loose to the css-parser unless there's '//' comment,\n    // simply because 1 variable just can't beat 99 properties :)\n    {\n      begin: '@' + IDENT_RE + '\\\\s*:',\n      relevance: 15\n    }, {\n      begin: '@' + IDENT_RE\n    }],\n    starts: {\n      end: '[;}]',\n      returnEnd: true,\n      contains: VALUE_WITH_RULESETS\n    }\n  };\n  var SELECTOR_MODE = {\n    // first parse unambiguous selectors (i.e. those not starting with tag)\n    // then fall into the scary lookahead-discriminator variant.\n    // this mode also handles mixin definitions and calls\n    variants: [{\n      begin: '[\\\\.#:&\\\\[>]',\n      end: '[;{}]' // mixin calls end with ';'\n\n    }, {\n      begin: INTERP_IDENT_RE,\n      end: '{'\n    }],\n    returnBegin: true,\n    returnEnd: true,\n    illegal: '[<=\\'$\"]',\n    relevance: 0,\n    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, MIXIN_GUARD_MODE, IDENT_MODE('keyword', 'all\\\\b'), IDENT_MODE('variable', '@{' + IDENT_RE + '}'), // otherwise it’s identified as tag\n    IDENT_MODE('selector-tag', INTERP_IDENT_RE + '%?', 0), // '%' for more consistent coloring of @keyframes \"tags\"\n    IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE), IDENT_MODE('selector-class', '\\\\.' + INTERP_IDENT_RE, 0), IDENT_MODE('selector-tag', '&', 0), {\n      className: 'selector-attr',\n      begin: '\\\\[',\n      end: '\\\\]'\n    }, {\n      className: 'selector-pseudo',\n      begin: /:(:)?[a-zA-Z0-9\\_\\-\\+\\(\\)\"'.]+/\n    }, {\n      begin: '\\\\(',\n      end: '\\\\)',\n      contains: VALUE_WITH_RULESETS\n    }, // argument list of parametric mixins\n    {\n      begin: '!important'\n    } // eat !important after mixin call or it will be colored as tag\n    ]\n  };\n  RULES.push(hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, AT_RULE_MODE, VAR_RULE_MODE, RULE_MODE, SELECTOR_MODE);\n  return {\n    case_insensitive: true,\n    illegal: '[=>\\'/<($\"]',\n    contains: RULES\n  };\n};","map":{"version":3,"sources":["C:/Users/micha/coding/Projects/Snapped/client/node_modules/highlight.js/lib/languages/less.js"],"names":["module","exports","hljs","IDENT_RE","INTERP_IDENT_RE","RULES","VALUE","STRING_MODE","c","className","begin","IDENT_MODE","name","relevance","PARENS_MODE","end","contains","push","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","CSS_NUMBER_MODE","starts","excludeEnd","returnBegin","VALUE_WITH_RULESETS","concat","MIXIN_GUARD_MODE","beginKeywords","endsWithParent","RULE_MODE","illegal","AT_RULE_MODE","returnEnd","VAR_RULE_MODE","variants","SELECTOR_MODE","case_insensitive"],"mappings":"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","sourcesContent":["module.exports = function(hljs) {\n  var IDENT_RE        = '[\\\\w-]+'; // yes, Less identifiers may begin with a digit\n  var INTERP_IDENT_RE = '(' + IDENT_RE + '|@{' + IDENT_RE + '})';\n\n  /* Generic Modes */\n\n  var RULES = [], VALUE = []; // forward def. for recursive modes\n\n  var STRING_MODE = function(c) { return {\n    // Less strings are not multiline (also include '~' for more consistent coloring of \"escaped\" strings)\n    className: 'string', begin: '~?' + c + '.*?' + c\n  };};\n\n  var IDENT_MODE = function(name, begin, relevance) { return {\n    className: name, begin: begin, relevance: relevance\n  };};\n\n  var PARENS_MODE = {\n    // used only to properly balance nested parens inside mixin call, def. arg list\n    begin: '\\\\(', end: '\\\\)', contains: VALUE, relevance: 0\n  };\n\n  // generic Less highlighter (used almost everywhere except selectors):\n  VALUE.push(\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    STRING_MODE(\"'\"),\n    STRING_MODE('\"'),\n    hljs.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(\n    {\n      begin: '(url|data-uri)\\\\(',\n      starts: {className: 'string', end: '[\\\\)\\\\n]', excludeEnd: true}\n    },\n    IDENT_MODE('number', '#[0-9A-Fa-f]+\\\\b'),\n    PARENS_MODE,\n    IDENT_MODE('variable', '@@?' + IDENT_RE, 10),\n    IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),\n    IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string\n    { // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):\n      className: 'attribute', begin: IDENT_RE + '\\\\s*:', end: ':', returnBegin: true, excludeEnd: true\n    },\n    {\n      className: 'meta',\n      begin: '!important'\n    }\n  );\n\n  var VALUE_WITH_RULESETS = VALUE.concat({\n    begin: '{', end: '}', contains: RULES\n  });\n\n  var MIXIN_GUARD_MODE = {\n    beginKeywords: 'when', endsWithParent: true,\n    contains: [{beginKeywords: 'and not'}].concat(VALUE) // using this form to override VALUE’s 'function' match\n  };\n\n  /* Rule-Level Modes */\n\n  var RULE_MODE = {\n    begin: INTERP_IDENT_RE + '\\\\s*:', returnBegin: true, end: '[;}]',\n    relevance: 0,\n    contains: [\n      {\n        className: 'attribute',\n        begin: INTERP_IDENT_RE, end: ':', excludeEnd: true,\n        starts: {\n          endsWithParent: true, illegal: '[<=$]',\n          relevance: 0,\n          contains: VALUE\n        }\n      }\n    ]\n  };\n\n  var AT_RULE_MODE = {\n    className: 'keyword',\n    begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\\\b',\n    starts: {end: '[;{}]', returnEnd: true, contains: VALUE, relevance: 0}\n  };\n\n  // variable definitions and calls\n  var VAR_RULE_MODE = {\n    className: 'variable',\n    variants: [\n      // using more strict pattern for higher relevance to increase chances of Less detection.\n      // this is *the only* Less specific statement used in most of the sources, so...\n      // (we’ll still often loose to the css-parser unless there's '//' comment,\n      // simply because 1 variable just can't beat 99 properties :)\n      {begin: '@' + IDENT_RE + '\\\\s*:', relevance: 15},\n      {begin: '@' + IDENT_RE}\n    ],\n    starts: {end: '[;}]', returnEnd: true, contains: VALUE_WITH_RULESETS}\n  };\n\n  var SELECTOR_MODE = {\n    // first parse unambiguous selectors (i.e. those not starting with tag)\n    // then fall into the scary lookahead-discriminator variant.\n    // this mode also handles mixin definitions and calls\n    variants: [{\n      begin: '[\\\\.#:&\\\\[>]', end: '[;{}]'  // mixin calls end with ';'\n      }, {\n      begin: INTERP_IDENT_RE, end: '{'\n    }],\n    returnBegin: true,\n    returnEnd:   true,\n    illegal: '[<=\\'$\"]',\n    relevance: 0,\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      MIXIN_GUARD_MODE,\n      IDENT_MODE('keyword',  'all\\\\b'),\n      IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),     // otherwise it’s identified as tag\n      IDENT_MODE('selector-tag',  INTERP_IDENT_RE + '%?', 0), // '%' for more consistent coloring of @keyframes \"tags\"\n      IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE),\n      IDENT_MODE('selector-class', '\\\\.' + INTERP_IDENT_RE, 0),\n      IDENT_MODE('selector-tag',  '&', 0),\n      {className: 'selector-attr', begin: '\\\\[', end: '\\\\]'},\n      {className: 'selector-pseudo', begin: /:(:)?[a-zA-Z0-9\\_\\-\\+\\(\\)\"'.]+/},\n      {begin: '\\\\(', end: '\\\\)', contains: VALUE_WITH_RULESETS}, // argument list of parametric mixins\n      {begin: '!important'} // eat !important after mixin call or it will be colored as tag\n    ]\n  };\n\n  RULES.push(\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    AT_RULE_MODE,\n    VAR_RULE_MODE,\n    RULE_MODE,\n    SELECTOR_MODE\n  );\n\n  return {\n    case_insensitive: true,\n    illegal: '[=>\\'/<($\"]',\n    contains: RULES\n  };\n};"]},"metadata":{},"sourceType":"script"}
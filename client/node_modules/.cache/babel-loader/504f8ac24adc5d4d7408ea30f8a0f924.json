{"ast":null,"code":"module.exports = function (hljs) {\n  var KEYWORDS = {\n    keyword: // JS keywords\n    'in if for while finally new do return else break catch instanceof throw try this ' + 'switch continue typeof delete debugger case default function var with ' + // LiveScript keywords\n    'then unless until loop of by when and or is isnt not it that otherwise from to til fallthrough super ' + 'case default function var void const let enum export import native list map ' + '__hasProp __extends __slice __bind __indexOf',\n    literal: // JS literals\n    'true false null undefined ' + // LiveScript literals\n    'yes no on off it that void',\n    built_in: 'npm require console print module global window document'\n  };\n  var JS_IDENT_RE = '[A-Za-z$_](?:\\-[0-9A-Za-z$_]|[0-9A-Za-z$_])*';\n  var TITLE = hljs.inherit(hljs.TITLE_MODE, {\n    begin: JS_IDENT_RE\n  });\n  var SUBST = {\n    className: 'subst',\n    begin: /#\\{/,\n    end: /}/,\n    keywords: KEYWORDS\n  };\n  var SUBST_SIMPLE = {\n    className: 'subst',\n    begin: /#[A-Za-z$_]/,\n    end: /(?:\\-[0-9A-Za-z$_]|[0-9A-Za-z$_])*/,\n    keywords: KEYWORDS\n  };\n  var EXPRESSIONS = [hljs.BINARY_NUMBER_MODE, {\n    className: 'number',\n    begin: '(\\\\b0[xX][a-fA-F0-9_]+)|(\\\\b\\\\d(\\\\d|_\\\\d)*(\\\\.(\\\\d(\\\\d|_\\\\d)*)?)?(_*[eE]([-+]\\\\d(_\\\\d|\\\\d)*)?)?[_a-z]*)',\n    relevance: 0,\n    starts: {\n      end: '(\\\\s*/)?',\n      relevance: 0\n    } // a number tries to eat the following slash to prevent treating it as a regexp\n\n  }, {\n    className: 'string',\n    variants: [{\n      begin: /'''/,\n      end: /'''/,\n      contains: [hljs.BACKSLASH_ESCAPE]\n    }, {\n      begin: /'/,\n      end: /'/,\n      contains: [hljs.BACKSLASH_ESCAPE]\n    }, {\n      begin: /\"\"\"/,\n      end: /\"\"\"/,\n      contains: [hljs.BACKSLASH_ESCAPE, SUBST, SUBST_SIMPLE]\n    }, {\n      begin: /\"/,\n      end: /\"/,\n      contains: [hljs.BACKSLASH_ESCAPE, SUBST, SUBST_SIMPLE]\n    }, {\n      begin: /\\\\/,\n      end: /(\\s|$)/,\n      excludeEnd: true\n    }]\n  }, {\n    className: 'regexp',\n    variants: [{\n      begin: '//',\n      end: '//[gim]*',\n      contains: [SUBST, hljs.HASH_COMMENT_MODE]\n    }, {\n      // regex can't start with space to parse x / 2 / 3 as two divisions\n      // regex can't start with *, and it supports an \"illegal\" in the main mode\n      begin: /\\/(?![ *])(\\\\\\/|.)*?\\/[gim]*(?=\\W)/\n    }]\n  }, {\n    begin: '@' + JS_IDENT_RE\n  }, {\n    begin: '``',\n    end: '``',\n    excludeBegin: true,\n    excludeEnd: true,\n    subLanguage: 'javascript'\n  }];\n  SUBST.contains = EXPRESSIONS;\n  var PARAMS = {\n    className: 'params',\n    begin: '\\\\(',\n    returnBegin: true,\n\n    /* We need another contained nameless mode to not have every nested\n    pair of parens to be called \"params\" */\n    contains: [{\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: KEYWORDS,\n      contains: ['self'].concat(EXPRESSIONS)\n    }]\n  };\n  var SYMBOLS = {\n    begin: '(#=>|=>|\\\\|>>|-?->|\\\\!->)'\n  };\n  return {\n    aliases: ['ls'],\n    keywords: KEYWORDS,\n    illegal: /\\/\\*/,\n    contains: EXPRESSIONS.concat([hljs.COMMENT('\\\\/\\\\*', '\\\\*\\\\/'), hljs.HASH_COMMENT_MODE, SYMBOLS, // relevance booster\n    {\n      className: 'function',\n      contains: [TITLE, PARAMS],\n      returnBegin: true,\n      variants: [{\n        begin: '(' + JS_IDENT_RE + '\\\\s*(?:=|:=)\\\\s*)?(\\\\(.*\\\\))?\\\\s*\\\\B\\\\->\\\\*?',\n        end: '\\\\->\\\\*?'\n      }, {\n        begin: '(' + JS_IDENT_RE + '\\\\s*(?:=|:=)\\\\s*)?!?(\\\\(.*\\\\))?\\\\s*\\\\B[-~]{1,2}>\\\\*?',\n        end: '[-~]{1,2}>\\\\*?'\n      }, {\n        begin: '(' + JS_IDENT_RE + '\\\\s*(?:=|:=)\\\\s*)?(\\\\(.*\\\\))?\\\\s*\\\\B!?[-~]{1,2}>\\\\*?',\n        end: '!?[-~]{1,2}>\\\\*?'\n      }]\n    }, {\n      className: 'class',\n      beginKeywords: 'class',\n      end: '$',\n      illegal: /[:=\"\\[\\]]/,\n      contains: [{\n        beginKeywords: 'extends',\n        endsWithParent: true,\n        illegal: /[:=\"\\[\\]]/,\n        contains: [TITLE]\n      }, TITLE]\n    }, {\n      begin: JS_IDENT_RE + ':',\n      end: ':',\n      returnBegin: true,\n      returnEnd: true,\n      relevance: 0\n    }])\n  };\n};","map":{"version":3,"sources":["C:/Users/micha/coding/Projects/Snapped/client/node_modules/highlight.js/lib/languages/livescript.js"],"names":["module","exports","hljs","KEYWORDS","keyword","literal","built_in","JS_IDENT_RE","TITLE","inherit","TITLE_MODE","begin","SUBST","className","end","keywords","SUBST_SIMPLE","EXPRESSIONS","BINARY_NUMBER_MODE","relevance","starts","variants","contains","BACKSLASH_ESCAPE","excludeEnd","HASH_COMMENT_MODE","excludeBegin","subLanguage","PARAMS","returnBegin","concat","SYMBOLS","aliases","illegal","COMMENT","beginKeywords","endsWithParent","returnEnd"],"mappings":"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","sourcesContent":["module.exports = function(hljs) {\n  var KEYWORDS = {\n    keyword:\n      // JS keywords\n      'in if for while finally new do return else break catch instanceof throw try this ' +\n      'switch continue typeof delete debugger case default function var with ' +\n      // LiveScript keywords\n      'then unless until loop of by when and or is isnt not it that otherwise from to til fallthrough super ' +\n      'case default function var void const let enum export import native list map ' +\n      '__hasProp __extends __slice __bind __indexOf',\n    literal:\n      // JS literals\n      'true false null undefined ' +\n      // LiveScript literals\n      'yes no on off it that void',\n    built_in:\n      'npm require console print module global window document'\n  };\n  var JS_IDENT_RE = '[A-Za-z$_](?:\\-[0-9A-Za-z$_]|[0-9A-Za-z$_])*';\n  var TITLE = hljs.inherit(hljs.TITLE_MODE, {begin: JS_IDENT_RE});\n  var SUBST = {\n    className: 'subst',\n    begin: /#\\{/, end: /}/,\n    keywords: KEYWORDS\n  };\n  var SUBST_SIMPLE = {\n    className: 'subst',\n    begin: /#[A-Za-z$_]/, end: /(?:\\-[0-9A-Za-z$_]|[0-9A-Za-z$_])*/,\n    keywords: KEYWORDS\n  };\n  var EXPRESSIONS = [\n    hljs.BINARY_NUMBER_MODE,\n    {\n      className: 'number',\n      begin: '(\\\\b0[xX][a-fA-F0-9_]+)|(\\\\b\\\\d(\\\\d|_\\\\d)*(\\\\.(\\\\d(\\\\d|_\\\\d)*)?)?(_*[eE]([-+]\\\\d(_\\\\d|\\\\d)*)?)?[_a-z]*)',\n      relevance: 0,\n      starts: {end: '(\\\\s*/)?', relevance: 0} // a number tries to eat the following slash to prevent treating it as a regexp\n    },\n    {\n      className: 'string',\n      variants: [\n        {\n          begin: /'''/, end: /'''/,\n          contains: [hljs.BACKSLASH_ESCAPE]\n        },\n        {\n          begin: /'/, end: /'/,\n          contains: [hljs.BACKSLASH_ESCAPE]\n        },\n        {\n          begin: /\"\"\"/, end: /\"\"\"/,\n          contains: [hljs.BACKSLASH_ESCAPE, SUBST, SUBST_SIMPLE]\n        },\n        {\n          begin: /\"/, end: /\"/,\n          contains: [hljs.BACKSLASH_ESCAPE, SUBST, SUBST_SIMPLE]\n        },\n        {\n          begin: /\\\\/, end: /(\\s|$)/,\n          excludeEnd: true\n        }\n      ]\n    },\n    {\n      className: 'regexp',\n      variants: [\n        {\n          begin: '//', end: '//[gim]*',\n          contains: [SUBST, hljs.HASH_COMMENT_MODE]\n        },\n        {\n          // regex can't start with space to parse x / 2 / 3 as two divisions\n          // regex can't start with *, and it supports an \"illegal\" in the main mode\n          begin: /\\/(?![ *])(\\\\\\/|.)*?\\/[gim]*(?=\\W)/\n        }\n      ]\n    },\n    {\n      begin: '@' + JS_IDENT_RE\n    },\n    {\n      begin: '``', end: '``',\n      excludeBegin: true, excludeEnd: true,\n      subLanguage: 'javascript'\n    }\n  ];\n  SUBST.contains = EXPRESSIONS;\n\n  var PARAMS = {\n    className: 'params',\n    begin: '\\\\(', returnBegin: true,\n    /* We need another contained nameless mode to not have every nested\n    pair of parens to be called \"params\" */\n    contains: [\n      {\n        begin: /\\(/, end: /\\)/,\n        keywords: KEYWORDS,\n        contains: ['self'].concat(EXPRESSIONS)\n      }\n    ]\n  };\n\n  var SYMBOLS = {\n    begin: '(#=>|=>|\\\\|>>|-?->|\\\\!->)'\n  };\n\n  return {\n    aliases: ['ls'],\n    keywords: KEYWORDS,\n    illegal: /\\/\\*/,\n    contains: EXPRESSIONS.concat([\n      hljs.COMMENT('\\\\/\\\\*', '\\\\*\\\\/'),\n      hljs.HASH_COMMENT_MODE,\n      SYMBOLS, // relevance booster\n      {\n        className: 'function',\n        contains: [TITLE, PARAMS],\n        returnBegin: true,\n        variants: [\n          {\n            begin: '(' + JS_IDENT_RE + '\\\\s*(?:=|:=)\\\\s*)?(\\\\(.*\\\\))?\\\\s*\\\\B\\\\->\\\\*?', end: '\\\\->\\\\*?'\n          },\n          {\n            begin: '(' + JS_IDENT_RE + '\\\\s*(?:=|:=)\\\\s*)?!?(\\\\(.*\\\\))?\\\\s*\\\\B[-~]{1,2}>\\\\*?', end: '[-~]{1,2}>\\\\*?'\n          },\n          {\n            begin: '(' + JS_IDENT_RE + '\\\\s*(?:=|:=)\\\\s*)?(\\\\(.*\\\\))?\\\\s*\\\\B!?[-~]{1,2}>\\\\*?', end: '!?[-~]{1,2}>\\\\*?'\n          }\n        ]\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class',\n        end: '$',\n        illegal: /[:=\"\\[\\]]/,\n        contains: [\n          {\n            beginKeywords: 'extends',\n            endsWithParent: true,\n            illegal: /[:=\"\\[\\]]/,\n            contains: [TITLE]\n          },\n          TITLE\n        ]\n      },\n      {\n        begin: JS_IDENT_RE + ':', end: ':',\n        returnBegin: true, returnEnd: true,\n        relevance: 0\n      }\n    ])\n  };\n};"]},"metadata":{},"sourceType":"script"}